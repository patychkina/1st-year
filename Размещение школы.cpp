/*В одной из деревень Центрального района решили построить новую школу, но никак не могут выбрать, в какой именно. 
Решили сделать так: подсчитать для каждой деревни суммарное расстояние, которое будут проходить все школьники 
Центрального района, если школа будет построена в этой деревне, и выбрать место, для которого эта сумма будет минимальной. 
В распоряжении администрации есть карта дорог Центрального района. Напишите программу, которая поможет выбрать место для школы. 
Если какой-то населенный пункт не имеет связи с другим населенным пунктом, где предполагается разместить школу, считайте, 
что доставка каждого ученика вертолётом "стоит" 10000 единиц расстояния.

Входные данные
В первой строке вводится количество деревень N ( 1 ≤ N ≤ 100 ). В следующих N строках записано по N чисел, 
разделённых пробелами – элементы весовой матрицы графа, который описывает схему дорог: положительное число 
означает расстояние между деревнями, ноль говорит о том, что дороги нет. В последней строке вводится N чисел 
- количество школьников в каждой деревне.

Выходные данные
Программа должна вывести два числа: сначала номер деревни, где нужно построить школу, а затем (через пробел)
 – общее расстояние, которое будут проходить все школьники Центрального района, если школа будет построена в этой деревне.

*/
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main()
{
	int N;
	const int INF = 10000;
	cin >> N;
	vector<vector<int>> matrix_g(N + 1, vector<int>(N + 1, INF));
	vector <int> count_students(N + 1);
	vector <int> max_len(N + 1);
	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			cin >> matrix_g[i][j];
			if (i == j)
				matrix_g[i][j] = 0;
			else
			{
				if (matrix_g[i][j] == 0)
					matrix_g[i][j] = INF;
			}
		}
	}

	for (int i = 1; i <= N; i++)
	{
		cin >> count_students[i];
	}

	for (int k = 1; k <= N; k++)
	{
		for (int i = 1; i <= N; i++)
		{
			for (int j = 1; j <= N; j++)
			{
				matrix_g[i][j] = min(matrix_g[i][j], matrix_g[i][k] + matrix_g[k][j]);
			}

		}
	}

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			max_len[i] += matrix_g[i][j] * count_students[j];
		}
	}

	int result1 = INT32_MAX;
	int result2 = INT32_MAX;
	for (int i = 1; i <= N; i++)
	{
		if (max_len[i] < result1)
		{
			result1 = max_len[i];
			result2 = i;
		}
	}
	cout << result2 << ' ' << result1 << endl;
}