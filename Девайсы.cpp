/*Студенты мат-меха обожают покупать современные девайсы.
 Однако размер стипендии вынуждает их приобретать новые устройства редко, но метко. 
 Также студенты мат-меха доверяют мнению друзей, поэтому при покупке нового девайса 
 выбирают тот, которым уже располагает как можно большее количество их товарищей, 
 а если таких девайсов несколько, то без зазрения совести приобретают самый дешёвый из них. 
 Вот и студент Илья уже опросил шестерых своих друзей и теперь просит вас помочь ему выбрать 
 новый девайс согласно приведённому выше правилу. Обратите внимание, что друзья могли купить 
 один и тот же девайс в разных местах по разной цене, и Илья сможет купить его по наименьшей из них.
Исходные данные
На вход даны описания девайсов 6 друзей. Каждое описание занимает три строки. 
В первой строке описания дано имя очередного друга, во второй — название девайса, 
принадлежащего этому другу, а в третьей строке дано одно целое число — стоимость девайса.
Все слова — строки длиной от 1 до 20 символов. Имена друзей содержат только строчные
 латинские буквы, названия девайсов — строчные латинские буквы и цифры. Стоимость — целое число от 1 до 106. 
 Имена друзей могут совпадать.
Результат
В единственной строке выведите название девайса, которым располагает наибольшее количество друзей, 
а если таких девайсов несколько, то выведите название самого дешёвого их них. 
Если и таких девайсов несколько, то выведите название любого из них.*/

#include <iostream>
#include <string>
#include <map>
#define count_friends 6
using namespace std;

int main()
{
	map <string, int> devices_price;
	map <string, int> devices_count;
	map <string, int> devices_fl;
	string total_device;
	int max_count = 0, min_price = 2147483647;
	for (int i = 0; i < count_friends; i++)
	{
		int price;
		string name, device;
		cin >> name >> device >> price;
		if ((devices_price[device] > price) || (devices_fl[device] == 0))
		{
			devices_price[device] = price;
			if (devices_fl[device] == 0)
				devices_fl[device] = 1;
		}
		devices_count[device] = devices_count[device] + 1;
		if (max_count < devices_count[device])
			max_count = devices_count[device];
	}
	for (auto d = devices_count.begin(); d != devices_count.end(); d++)
	{
		if (d->second == max_count)
		{
			if (devices_price[d->first] <= min_price)
			{
				min_price = devices_price[d->first];
				total_device = d->first;
			}
		}
	}
	cout << total_device << endl;
}